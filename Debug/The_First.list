
The_First.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003f60  08003f60  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f60  08003f60  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000048  08003fb0  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003fb0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b615  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4c  00000000  00000000  0002b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001750e  00000000  00000000  0002ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb20  00000000  00000000  000461be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008989b  00000000  00000000  00052cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  000dc5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f24 	.word	0x08003f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003f24 	.word	0x08003f24

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f9ce 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa0a 	bl	8000570 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9ea 	bl	8000534 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f88e 	bl	8000280 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000164:	f000 f904 	bl	8000370 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000168:	f000 f94e 	bl	8000408 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4813      	ldr	r0, [pc, #76]	; (80001bc <main+0x70>)
 800016e:	f002 ff97 	bl	80030a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000172:	2100      	movs	r1, #0
 8000174:	4812      	ldr	r0, [pc, #72]	; (80001c0 <main+0x74>)
 8000176:	f003 f83d 	bl	80031f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800017a:	2104      	movs	r1, #4
 800017c:	4810      	ldr	r0, [pc, #64]	; (80001c0 <main+0x74>)
 800017e:	f003 f839 	bl	80031f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000182:	2108      	movs	r1, #8
 8000184:	480e      	ldr	r0, [pc, #56]	; (80001c0 <main+0x74>)
 8000186:	f003 f835 	bl	80031f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800018a:	210c      	movs	r1, #12
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <main+0x74>)
 800018e:	f003 f831 	bl	80031f4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1,10);
 8000192:	210a      	movs	r1, #10
 8000194:	2001      	movs	r0, #1
 8000196:	f000 fffd 	bl	8001194 <setTimer>
  while (1)
  {
	  if(timer_flag[1]){
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x78>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0fb      	beq.n	800019a <main+0x4e>
		  setTimer(1,10);
 80001a2:	210a      	movs	r1, #10
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 fff5 	bl	8001194 <setTimer>
		  buttonScan();
 80001aa:	f000 fa5b 	bl	8000664 <buttonScan>
//		  sensorScan();
		  checkLine();
 80001ae:	f000 facf 	bl	8000750 <checkLine>
		  lineSet();
 80001b2:	f000 fc2d 	bl	8000a10 <lineSet>
//		  forward();
//		  backwards();
		  ledBlink();
 80001b6:	f000 faaf 	bl	8000718 <ledBlink>
	  if(timer_flag[1]){
 80001ba:	e7ee      	b.n	800019a <main+0x4e>
 80001bc:	200001f0 	.word	0x200001f0
 80001c0:	20000128 	.word	0x20000128
 80001c4:	200000d8 	.word	0x200000d8

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fe9c 	bl	8003f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fa5c 	bl	80026dc <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 fdcd 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fcc6 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 fdb7 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800025e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000262:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fe14 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000272:	f000 fda9 	bl	8000dc8 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3750      	adds	r7, #80	; 0x50
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000290:	4b35      	ldr	r3, [pc, #212]	; (8000368 <MX_ADC1_Init+0xe8>)
 8000292:	4a36      	ldr	r2, [pc, #216]	; (800036c <MX_ADC1_Init+0xec>)
 8000294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000296:	4b34      	ldr	r3, [pc, #208]	; (8000368 <MX_ADC1_Init+0xe8>)
 8000298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800029c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800029e:	4b32      	ldr	r3, [pc, #200]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a4:	4b30      	ldr	r3, [pc, #192]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002aa:	4b2f      	ldr	r3, [pc, #188]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80002b8:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002ba:	2205      	movs	r2, #5
 80002bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002be:	482a      	ldr	r0, [pc, #168]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002c0:	f001 f978 	bl	80015b4 <HAL_ADC_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002ca:	f000 fd7d 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80002d6:	2303      	movs	r3, #3
 80002d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4822      	ldr	r0, [pc, #136]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002e0:	f001 fb3a 	bl	8001958 <HAL_ADC_ConfigChannel>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002ea:	f000 fd6d 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	481b      	ldr	r0, [pc, #108]	; (8000368 <MX_ADC1_Init+0xe8>)
 80002fc:	f001 fb2c 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000306:	f000 fd5f 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800030a:	2303      	movs	r3, #3
 800030c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800030e:	2303      	movs	r3, #3
 8000310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4619      	mov	r1, r3
 8000316:	4814      	ldr	r0, [pc, #80]	; (8000368 <MX_ADC1_Init+0xe8>)
 8000318:	f001 fb1e 	bl	8001958 <HAL_ADC_ConfigChannel>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000322:	f000 fd51 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000326:	2304      	movs	r3, #4
 8000328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800032a:	2304      	movs	r3, #4
 800032c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_ADC1_Init+0xe8>)
 8000334:	f001 fb10 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800033e:	f000 fd43 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000342:	2305      	movs	r3, #5
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000346:	2305      	movs	r3, #5
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <MX_ADC1_Init+0xe8>)
 8000350:	f001 fb02 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800035a:	f000 fd35 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000170 	.word	0x20000170
 800036c:	40012400 	.word	0x40012400

08000370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	463b      	mov	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_TIM2_Init+0x94>)
 800038e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_TIM2_Init+0x94>)
 8000396:	f240 22cf 	movw	r2, #719	; 0x2cf
 800039a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM2_Init+0x94>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_TIM2_Init+0x94>)
 80003a4:	2263      	movs	r2, #99	; 0x63
 80003a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_TIM2_Init+0x94>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_TIM2_Init+0x94>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_TIM2_Init+0x94>)
 80003b6:	f002 fe23 	bl	8003000 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003c0:	f000 fd02 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_TIM2_Init+0x94>)
 80003d2:	f003 f97b 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003dc:	f000 fcf4 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_TIM2_Init+0x94>)
 80003ee:	f003 fcfd 	bl	8003dec <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003f8:	f000 fce6 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200001f0 	.word	0x200001f0

08000408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08e      	sub	sp, #56	; 0x38
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 0320 	add.w	r3, r7, #32
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]
 8000436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000438:	4b3c      	ldr	r3, [pc, #240]	; (800052c <MX_TIM4_Init+0x124>)
 800043a:	4a3d      	ldr	r2, [pc, #244]	; (8000530 <MX_TIM4_Init+0x128>)
 800043c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <MX_TIM4_Init+0x124>)
 8000440:	228f      	movs	r2, #143	; 0x8f
 8000442:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b39      	ldr	r3, [pc, #228]	; (800052c <MX_TIM4_Init+0x124>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <MX_TIM4_Init+0x124>)
 800044c:	2263      	movs	r2, #99	; 0x63
 800044e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b36      	ldr	r3, [pc, #216]	; (800052c <MX_TIM4_Init+0x124>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000456:	4b35      	ldr	r3, [pc, #212]	; (800052c <MX_TIM4_Init+0x124>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800045c:	4833      	ldr	r0, [pc, #204]	; (800052c <MX_TIM4_Init+0x124>)
 800045e:	f002 fdcf 	bl	8003000 <HAL_TIM_Base_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000468:	f000 fcae 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000470:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000476:	4619      	mov	r1, r3
 8000478:	482c      	ldr	r0, [pc, #176]	; (800052c <MX_TIM4_Init+0x124>)
 800047a:	f003 f927 	bl	80036cc <HAL_TIM_ConfigClockSource>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000484:	f000 fca0 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <MX_TIM4_Init+0x124>)
 800048a:	f002 fe5b 	bl	8003144 <HAL_TIM_PWM_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000494:	f000 fc98 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000498:	2300      	movs	r3, #0
 800049a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004a0:	f107 0320 	add.w	r3, r7, #32
 80004a4:	4619      	mov	r1, r3
 80004a6:	4821      	ldr	r0, [pc, #132]	; (800052c <MX_TIM4_Init+0x124>)
 80004a8:	f003 fca0 	bl	8003dec <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80004b2:	f000 fc89 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b6:	2360      	movs	r3, #96	; 0x60
 80004b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	4619      	mov	r1, r3
 80004cc:	4817      	ldr	r0, [pc, #92]	; (800052c <MX_TIM4_Init+0x124>)
 80004ce:	f003 f83b 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80004d8:	f000 fc76 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2204      	movs	r2, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <MX_TIM4_Init+0x124>)
 80004e4:	f003 f830 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80004ee:	f000 fc6b 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2208      	movs	r2, #8
 80004f6:	4619      	mov	r1, r3
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_TIM4_Init+0x124>)
 80004fa:	f003 f825 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000504:	f000 fc60 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	220c      	movs	r2, #12
 800050c:	4619      	mov	r1, r3
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <MX_TIM4_Init+0x124>)
 8000510:	f003 f81a 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800051a:	f000 fc55 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800051e:	4803      	ldr	r0, [pc, #12]	; (800052c <MX_TIM4_Init+0x124>)
 8000520:	f000 ff4a 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 8000524:	bf00      	nop
 8000526:	3738      	adds	r7, #56	; 0x38
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000128 	.word	0x20000128
 8000530:	40000800 	.word	0x40000800

08000534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <MX_DMA_Init+0x38>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_DMA_Init+0x38>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	200b      	movs	r0, #11
 8000558:	f001 fccf 	bl	8001efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055c:	200b      	movs	r0, #11
 800055e:	f001 fce8 	bl	8001f32 <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <MX_GPIO_Init+0xd0>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_GPIO_Init+0xd0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEBUG_Pin|IN1_DC1_Pin|IN2_DC1_Pin|IN1_DC2_Pin
 80005cc:	2200      	movs	r2, #0
 80005ce:	f64f 4104 	movw	r1, #64516	; 0xfc04
 80005d2:	481c      	ldr	r0, [pc, #112]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005d4:	f002 f851 	bl	800267a <HAL_GPIO_WritePin>
                          |IN2_DC2_Pin|IN1_DC3_Pin|IN2_DC3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_DC4_Pin|IN2_DC4_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <MX_GPIO_Init+0xd8>)
 80005e0:	f002 f84b 	bl	800267a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_KEY_Pin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4814      	ldr	r0, [pc, #80]	; (8000648 <MX_GPIO_Init+0xd8>)
 80005f8:	f001 fea4 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DEBUG_Pin IN1_DC1_Pin IN2_DC1_Pin IN1_DC2_Pin
                           IN2_DC2_Pin IN1_DC3_Pin IN2_DC3_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|IN1_DC1_Pin|IN2_DC1_Pin|IN1_DC2_Pin
 80005fc:	f64f 4304 	movw	r3, #64516	; 0xfc04
 8000600:	613b      	str	r3, [r7, #16]
                          |IN2_DC2_Pin|IN1_DC3_Pin|IN2_DC3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0xd4>)
 8000616:	f001 fe95 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DC4_Pin IN2_DC4_Pin */
  GPIO_InitStruct.Pin = IN1_DC4_Pin|IN2_DC4_Pin;
 800061a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_GPIO_Init+0xd8>)
 8000634:	f001 fe86 	bl	8002344 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40010800 	.word	0x40010800

0800064c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	timerRun(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fdb5 	bl	80011c4 <timerRun>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <buttonScan>:

void buttonScan(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(USER_KEY_GPIO_Port, USER_KEY_Pin) == 1) button_count++;
 8000668:	2101      	movs	r1, #1
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <buttonScan+0x28>)
 800066c:	f001 ffee 	bl	800264c <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d105      	bne.n	8000682 <buttonScan+0x1e>
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <buttonScan+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <buttonScan+0x2c>)
 800067e:	6013      	str	r3, [r2, #0]
	else button_count = 0;
}
 8000680:	e002      	b.n	8000688 <buttonScan+0x24>
	else button_count = 0;
 8000682:	4b03      	ldr	r3, [pc, #12]	; (8000690 <buttonScan+0x2c>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010800 	.word	0x40010800
 8000690:	20000070 	.word	0x20000070

08000694 <sensorScan>:


void sensorScan(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, sensor_value, 5);
 800069a:	2205      	movs	r2, #5
 800069c:	491a      	ldr	r1, [pc, #104]	; (8000708 <sensorScan+0x74>)
 800069e:	481b      	ldr	r0, [pc, #108]	; (800070c <sensorScan+0x78>)
 80006a0:	f001 f860 	bl	8001764 <HAL_ADC_Start_DMA>
	sensor_buffer = 0;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <sensorScan+0x7c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e022      	b.n	80006f6 <sensorScan+0x62>
		sensor_buffer = sensor_buffer << 1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <sensorScan+0x7c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <sensorScan+0x7c>)
 80006b8:	6013      	str	r3, [r2, #0]
//		if(sensor_value[i] > sensor_calib[i] - ERROR_RANGE && sensor_value[i] < sensor_calib[i] + ERROR_RANGE) sensor_buffer++;
		if((sensor_value[i] > sensor_calib[i] - ERROR_RANGE) && (sensor_value[i] < sensor_calib[i] + ERROR_RANGE)) sensor_buffer++;
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <sensorScan+0x80>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	3b63      	subs	r3, #99	; 0x63
 80006c4:	4910      	ldr	r1, [pc, #64]	; (8000708 <sensorScan+0x74>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	dc0f      	bgt.n	80006f0 <sensorScan+0x5c>
 80006d0:	4a10      	ldr	r2, [pc, #64]	; (8000714 <sensorScan+0x80>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d8:	3363      	adds	r3, #99	; 0x63
 80006da:	490b      	ldr	r1, [pc, #44]	; (8000708 <sensorScan+0x74>)
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006e2:	4293      	cmp	r3, r2
 80006e4:	db04      	blt.n	80006f0 <sensorScan+0x5c>
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <sensorScan+0x7c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <sensorScan+0x7c>)
 80006ee:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 5; i++){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3301      	adds	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	ddd9      	ble.n	80006b0 <sensorScan+0x1c>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000238 	.word	0x20000238
 800070c:	20000170 	.word	0x20000170
 8000710:	20000068 	.word	0x20000068
 8000714:	200001e4 	.word	0x200001e4

08000718 <ledBlink>:

void ledBlink(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	led_count++;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <ledBlink+0x2c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <ledBlink+0x2c>)
 8000724:	6013      	str	r3, [r2, #0]
	if(led_count >= led_cycle) {
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <ledBlink+0x2c>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <ledBlink+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	db06      	blt.n	8000740 <ledBlink+0x28>
		led_count = 0;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <ledBlink+0x2c>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8000738:	2104      	movs	r1, #4
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <ledBlink+0x34>)
 800073c:	f001 ffb5 	bl	80026aa <HAL_GPIO_TogglePin>
	}
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000006c 	.word	0x2000006c
 8000748:	20000038 	.word	0x20000038
 800074c:	40010c00 	.word	0x40010c00

08000750 <checkLine>:
#define LINE_ERROR	2
#define LINE_LEFT	3
#define LINE_RIGHT	4

uint8_t line_code = 0;
uint8_t checkLine(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	sensorScan();
 8000754:	f7ff ff9e 	bl	8000694 <sensorScan>
	switch (sensor_buffer) {
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <checkLine+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b1f      	cmp	r3, #31
 800075e:	d857      	bhi.n	8000810 <checkLine+0xc0>
 8000760:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <checkLine+0x18>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	080007e9 	.word	0x080007e9
 800076c:	08000809 	.word	0x08000809
 8000770:	08000809 	.word	0x08000809
 8000774:	08000809 	.word	0x08000809
 8000778:	080007f9 	.word	0x080007f9
 800077c:	08000811 	.word	0x08000811
 8000780:	08000809 	.word	0x08000809
 8000784:	08000809 	.word	0x08000809
 8000788:	08000801 	.word	0x08000801
 800078c:	08000811 	.word	0x08000811
 8000790:	080007f1 	.word	0x080007f1
 8000794:	08000811 	.word	0x08000811
 8000798:	08000801 	.word	0x08000801
 800079c:	08000811 	.word	0x08000811
 80007a0:	080007f9 	.word	0x080007f9
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	08000801 	.word	0x08000801
 80007ac:	08000811 	.word	0x08000811
 80007b0:	08000811 	.word	0x08000811
 80007b4:	08000811 	.word	0x08000811
 80007b8:	08000811 	.word	0x08000811
 80007bc:	08000811 	.word	0x08000811
 80007c0:	08000811 	.word	0x08000811
 80007c4:	08000811 	.word	0x08000811
 80007c8:	08000801 	.word	0x08000801
 80007cc:	08000811 	.word	0x08000811
 80007d0:	08000811 	.word	0x08000811
 80007d4:	080007f1 	.word	0x080007f1
 80007d8:	08000801 	.word	0x08000801
 80007dc:	08000811 	.word	0x08000811
 80007e0:	080007f1 	.word	0x080007f1
 80007e4:	080007f1 	.word	0x080007f1
		case 0b00000:
			line_code = LINE_ERROR;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <checkLine+0xd4>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
			break;
 80007ee:	e013      	b.n	8000818 <checkLine+0xc8>
		case 0b11111:
		case 0b11110:
		case 0b01111:
		case 0b01010:
		case 0b11011:
			line_code = LINE_CROSS;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <checkLine+0xd4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
			break;
 80007f6:	e00f      	b.n	8000818 <checkLine+0xc8>
		case 0b00100:
		case 0b01110:
			line_code = LINE_CENTER;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <checkLine+0xd4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			break;
 80007fe:	e00b      	b.n	8000818 <checkLine+0xc8>
		case 0b11100:
		case 0b11000:
		case 0b10000:
		case 0b01100:
		case 0b01000:
			line_code = LINE_LEFT;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <checkLine+0xd4>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
			break;
 8000806:	e007      	b.n	8000818 <checkLine+0xc8>
		case 0b00111:
		case 0b00011:
		case 0b00001:
		case 0b00110:
		case 0b00010:
			line_code = LINE_RIGHT;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <checkLine+0xd4>)
 800080a:	2204      	movs	r2, #4
 800080c:	701a      	strb	r2, [r3, #0]
			break;
 800080e:	e003      	b.n	8000818 <checkLine+0xc8>
		default:
			line_code = LINE_ERROR;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <checkLine+0xd4>)
 8000812:	2202      	movs	r2, #2
 8000814:	701a      	strb	r2, [r3, #0]
			break;
 8000816:	bf00      	nop
	}
	return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000068 	.word	0x20000068
 8000824:	20000074 	.word	0x20000074

08000828 <checkStatus>:

uint8_t checkStatus(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	index++;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <checkStatus+0x74>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <checkStatus+0x74>)
 8000836:	701a      	strb	r2, [r3, #0]
	if(arr[index-1] == '\0')
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <checkStatus+0x74>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <checkStatus+0x78>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <checkStatus+0x22>
		return STOP;
 8000846:	236c      	movs	r3, #108	; 0x6c
 8000848:	e024      	b.n	8000894 <checkStatus+0x6c>
	if(arr[index-1] == 'L')
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <checkStatus+0x74>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	3b01      	subs	r3, #1
 8000850:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <checkStatus+0x78>)
 8000852:	5cd3      	ldrb	r3, [r2, r3]
 8000854:	2b4c      	cmp	r3, #76	; 0x4c
 8000856:	d101      	bne.n	800085c <checkStatus+0x34>
		return TURNLEFT;
 8000858:	2368      	movs	r3, #104	; 0x68
 800085a:	e01b      	b.n	8000894 <checkStatus+0x6c>
	if(arr[index-1] == 'R')
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <checkStatus+0x74>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <checkStatus+0x78>)
 8000864:	5cd3      	ldrb	r3, [r2, r3]
 8000866:	2b52      	cmp	r3, #82	; 0x52
 8000868:	d101      	bne.n	800086e <checkStatus+0x46>
		return TURNRIGHT;
 800086a:	2369      	movs	r3, #105	; 0x69
 800086c:	e012      	b.n	8000894 <checkStatus+0x6c>
	if(arr[index-1] == 'F')
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <checkStatus+0x74>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <checkStatus+0x78>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	2b46      	cmp	r3, #70	; 0x46
 800087a:	d101      	bne.n	8000880 <checkStatus+0x58>
		return FORWARD;
 800087c:	236a      	movs	r3, #106	; 0x6a
 800087e:	e009      	b.n	8000894 <checkStatus+0x6c>
	if(arr[index-1] == 'B')
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <checkStatus+0x74>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <checkStatus+0x78>)
 8000888:	5cd3      	ldrb	r3, [r2, r3]
 800088a:	2b42      	cmp	r3, #66	; 0x42
 800088c:	d101      	bne.n	8000892 <checkStatus+0x6a>
		return READYBACKWARDS;
 800088e:	2370      	movs	r3, #112	; 0x70
 8000890:	e000      	b.n	8000894 <checkStatus+0x6c>
	return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000065 	.word	0x20000065
 80008a0:	20000004 	.word	0x20000004

080008a4 <sensorCalib>:

void sensorCalib(){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e00a      	b.n	80008c6 <sensorCalib+0x22>
		sensor_calib[i] = sensor_value[i];
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <sensorCalib+0x34>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <sensorCalib+0x38>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 5; i++){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	ddf1      	ble.n	80008b0 <sensorCalib+0xc>
	}
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000238 	.word	0x20000238
 80008dc:	200001e4 	.word	0x200001e4

080008e0 <followLine>:

void followLine(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	switch (line_code) {
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <followLine+0x4c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d81c      	bhi.n	8000926 <followLine+0x46>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <followLine+0x14>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	0800090f 	.word	0x0800090f
 80008f8:	08000921 	.word	0x08000921
 80008fc:	08000909 	.word	0x08000909
 8000900:	0800091b 	.word	0x0800091b
 8000904:	08000915 	.word	0x08000915
		case LINE_ERROR:
			forward();
 8000908:	f000 fbe4 	bl	80010d4 <forward>
			break;
 800090c:	e00c      	b.n	8000928 <followLine+0x48>
		case LINE_CENTER:
			forward();
 800090e:	f000 fbe1 	bl	80010d4 <forward>
			break;
 8000912:	e009      	b.n	8000928 <followLine+0x48>
		case LINE_RIGHT:
			rotateRight();
 8000914:	f000 fc2e 	bl	8001174 <rotateRight>
			break;
 8000918:	e006      	b.n	8000928 <followLine+0x48>
		case LINE_LEFT:
			rotateLeft();
 800091a:	f000 fc1b 	bl	8001154 <rotateLeft>
			break;
 800091e:	e003      	b.n	8000928 <followLine+0x48>
		case LINE_CROSS:
			stop();
 8000920:	f000 fbcc 	bl	80010bc <stop>
			break;
 8000924:	e000      	b.n	8000928 <followLine+0x48>
		default:
			break;
 8000926:	bf00      	nop
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000074 	.word	0x20000074

08000930 <followLineUntilCross>:

int status_follow = 0;
int followLineUntilCross(){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
//	            else:
//	                await asleep_ms(10)
//
//	        #await self.forward_for(0.1, unit=SECOND) # to pass cross line a bit
//	        await self.stop_then(then)
	if(status_follow == 0){
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <followLineUntilCross+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d107      	bne.n	800094c <followLineUntilCross+0x1c>
		if(line_code != LINE_CROSS) status_follow = 1;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <followLineUntilCross+0x44>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00f      	beq.n	8000964 <followLineUntilCross+0x34>
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <followLineUntilCross+0x40>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e00b      	b.n	8000964 <followLineUntilCross+0x34>
	} else if(status_follow == 1){
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <followLineUntilCross+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d107      	bne.n	8000964 <followLineUntilCross+0x34>
		if(line_code == LINE_CROSS) {
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <followLineUntilCross+0x44>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d103      	bne.n	8000964 <followLineUntilCross+0x34>
			stop();
 800095c:	f000 fbae 	bl	80010bc <stop>
			return 1;
 8000960:	2301      	movs	r3, #1
 8000962:	e002      	b.n	800096a <followLineUntilCross+0x3a>
		}
	}
	followLine();
 8000964:	f7ff ffbc 	bl	80008e0 <followLine>
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000078 	.word	0x20000078
 8000974:	20000074 	.word	0x20000074

08000978 <turnLeftUntilLine>:

int status_turn_left = 0;
int turnLeftUntilLine(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	rotateLeft();
 800097c:	f000 fbea 	bl	8001154 <rotateLeft>
	if(status_turn_left == 0){
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <turnLeftUntilLine+0x44>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <turnLeftUntilLine+0x20>
		if(line_code != LINE_CENTER) status_turn_left = 1;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <turnLeftUntilLine+0x48>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d012      	beq.n	80009b6 <turnLeftUntilLine+0x3e>
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <turnLeftUntilLine+0x44>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e00e      	b.n	80009b6 <turnLeftUntilLine+0x3e>
	} else if(status_turn_left == 1){
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <turnLeftUntilLine+0x44>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10a      	bne.n	80009b6 <turnLeftUntilLine+0x3e>
		if(line_code == LINE_LEFT) {
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <turnLeftUntilLine+0x48>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d106      	bne.n	80009b6 <turnLeftUntilLine+0x3e>
			status_turn_left = 0;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <turnLeftUntilLine+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
			stop();
 80009ae:	f000 fb85 	bl	80010bc <stop>
			return 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <turnLeftUntilLine+0x40>
		}
	}
	return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000007c 	.word	0x2000007c
 80009c0:	20000074 	.word	0x20000074

080009c4 <turnRightUntilLine>:

int status_turn_right = 0;
int turnRightUntilLine(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	rotateRight();
 80009c8:	f000 fbd4 	bl	8001174 <rotateRight>
	if(status_turn_right == 0){
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <turnRightUntilLine+0x44>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <turnRightUntilLine+0x20>
		if(line_code != LINE_CENTER) status_turn_right = 1;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <turnRightUntilLine+0x48>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d012      	beq.n	8000a02 <turnRightUntilLine+0x3e>
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <turnRightUntilLine+0x44>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e00e      	b.n	8000a02 <turnRightUntilLine+0x3e>
	} else if(status_turn_right == 1){
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <turnRightUntilLine+0x44>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10a      	bne.n	8000a02 <turnRightUntilLine+0x3e>
		if(line_code == LINE_RIGHT) {
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <turnRightUntilLine+0x48>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d106      	bne.n	8000a02 <turnRightUntilLine+0x3e>
			status_turn_right = 0;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <turnRightUntilLine+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
			stop();
 80009fa:	f000 fb5f 	bl	80010bc <stop>
			return 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <turnRightUntilLine+0x40>
		}
	}

	return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000080 	.word	0x20000080
 8000a0c:	20000074 	.word	0x20000074

08000a10 <lineSet>:

#define GET_STATUS	21
void lineSet(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	switch(status) {
 8000a14:	4bd5      	ldr	r3, [pc, #852]	; (8000d6c <lineSet+0x35c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3b15      	subs	r3, #21
 8000a1a:	2b61      	cmp	r3, #97	; 0x61
 8000a1c:	f200 81b2 	bhi.w	8000d84 <lineSet+0x374>
 8000a20:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <lineSet+0x18>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000bcd 	.word	0x08000bcd
 8000a2c:	08000d85 	.word	0x08000d85
 8000a30:	08000d85 	.word	0x08000d85
 8000a34:	08000d85 	.word	0x08000d85
 8000a38:	08000d85 	.word	0x08000d85
 8000a3c:	08000d85 	.word	0x08000d85
 8000a40:	08000d85 	.word	0x08000d85
 8000a44:	08000d85 	.word	0x08000d85
 8000a48:	08000d85 	.word	0x08000d85
 8000a4c:	08000d85 	.word	0x08000d85
 8000a50:	08000d85 	.word	0x08000d85
 8000a54:	08000d85 	.word	0x08000d85
 8000a58:	08000d85 	.word	0x08000d85
 8000a5c:	08000d85 	.word	0x08000d85
 8000a60:	08000d85 	.word	0x08000d85
 8000a64:	08000d85 	.word	0x08000d85
 8000a68:	08000d85 	.word	0x08000d85
 8000a6c:	08000d85 	.word	0x08000d85
 8000a70:	08000d85 	.word	0x08000d85
 8000a74:	08000d85 	.word	0x08000d85
 8000a78:	08000d85 	.word	0x08000d85
 8000a7c:	08000d85 	.word	0x08000d85
 8000a80:	08000d85 	.word	0x08000d85
 8000a84:	08000d85 	.word	0x08000d85
 8000a88:	08000d85 	.word	0x08000d85
 8000a8c:	08000d85 	.word	0x08000d85
 8000a90:	08000d85 	.word	0x08000d85
 8000a94:	08000d85 	.word	0x08000d85
 8000a98:	08000d85 	.word	0x08000d85
 8000a9c:	08000d85 	.word	0x08000d85
 8000aa0:	08000d85 	.word	0x08000d85
 8000aa4:	08000d85 	.word	0x08000d85
 8000aa8:	08000d85 	.word	0x08000d85
 8000aac:	08000d85 	.word	0x08000d85
 8000ab0:	08000d85 	.word	0x08000d85
 8000ab4:	08000d85 	.word	0x08000d85
 8000ab8:	08000d85 	.word	0x08000d85
 8000abc:	08000d85 	.word	0x08000d85
 8000ac0:	08000d85 	.word	0x08000d85
 8000ac4:	08000d85 	.word	0x08000d85
 8000ac8:	08000d85 	.word	0x08000d85
 8000acc:	08000d85 	.word	0x08000d85
 8000ad0:	08000d85 	.word	0x08000d85
 8000ad4:	08000d85 	.word	0x08000d85
 8000ad8:	08000d85 	.word	0x08000d85
 8000adc:	08000d85 	.word	0x08000d85
 8000ae0:	08000d85 	.word	0x08000d85
 8000ae4:	08000d85 	.word	0x08000d85
 8000ae8:	08000d85 	.word	0x08000d85
 8000aec:	08000d85 	.word	0x08000d85
 8000af0:	08000d85 	.word	0x08000d85
 8000af4:	08000d85 	.word	0x08000d85
 8000af8:	08000d85 	.word	0x08000d85
 8000afc:	08000d85 	.word	0x08000d85
 8000b00:	08000d85 	.word	0x08000d85
 8000b04:	08000d85 	.word	0x08000d85
 8000b08:	08000d85 	.word	0x08000d85
 8000b0c:	08000d85 	.word	0x08000d85
 8000b10:	08000d85 	.word	0x08000d85
 8000b14:	08000d85 	.word	0x08000d85
 8000b18:	08000d85 	.word	0x08000d85
 8000b1c:	08000d85 	.word	0x08000d85
 8000b20:	08000d85 	.word	0x08000d85
 8000b24:	08000d85 	.word	0x08000d85
 8000b28:	08000d85 	.word	0x08000d85
 8000b2c:	08000d85 	.word	0x08000d85
 8000b30:	08000d85 	.word	0x08000d85
 8000b34:	08000d85 	.word	0x08000d85
 8000b38:	08000d85 	.word	0x08000d85
 8000b3c:	08000bb1 	.word	0x08000bb1
 8000b40:	08000d85 	.word	0x08000d85
 8000b44:	08000d85 	.word	0x08000d85
 8000b48:	08000d85 	.word	0x08000d85
 8000b4c:	08000d85 	.word	0x08000d85
 8000b50:	08000d85 	.word	0x08000d85
 8000b54:	08000d85 	.word	0x08000d85
 8000b58:	08000d85 	.word	0x08000d85
 8000b5c:	08000d85 	.word	0x08000d85
 8000b60:	08000d85 	.word	0x08000d85
 8000b64:	08000d85 	.word	0x08000d85
 8000b68:	08000d85 	.word	0x08000d85
 8000b6c:	08000d85 	.word	0x08000d85
 8000b70:	08000d85 	.word	0x08000d85
 8000b74:	08000cf9 	.word	0x08000cf9
 8000b78:	08000d2f 	.word	0x08000d2f
 8000b7c:	08000c11 	.word	0x08000c11
 8000b80:	08000c5f 	.word	0x08000c5f
 8000b84:	08000d65 	.word	0x08000d65
 8000b88:	08000d85 	.word	0x08000d85
 8000b8c:	08000d85 	.word	0x08000d85
 8000b90:	08000d85 	.word	0x08000d85
 8000b94:	08000c2b 	.word	0x08000c2b
 8000b98:	08000d11 	.word	0x08000d11
 8000b9c:	08000d47 	.word	0x08000d47
 8000ba0:	08000cc3 	.word	0x08000cc3
 8000ba4:	08000bf9 	.word	0x08000bf9
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c81 	.word	0x08000c81
		case CALIB:
			if(button_count == 100){
 8000bb0:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <lineSet+0x360>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b64      	cmp	r3, #100	; 0x64
 8000bb6:	f040 80e9 	bne.w	8000d8c <lineSet+0x37c>
				sensorCalib();
 8000bba:	f7ff fe73 	bl	80008a4 <sensorCalib>
				led_cycle = 100;
 8000bbe:	4b6d      	ldr	r3, [pc, #436]	; (8000d74 <lineSet+0x364>)
 8000bc0:	2264      	movs	r2, #100	; 0x64
 8000bc2:	601a      	str	r2, [r3, #0]
				status = START;
 8000bc4:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <lineSet+0x35c>)
 8000bc6:	2274      	movs	r2, #116	; 0x74
 8000bc8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bca:	e0df      	b.n	8000d8c <lineSet+0x37c>
		case GET_STATUS:
			if(count > 0) count--;
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <lineSet+0x368>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <lineSet+0x1d0>
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <lineSet+0x368>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <lineSet+0x368>)
 8000bde:	701a      	strb	r2, [r3, #0]
			if(count == 0){
 8000be0:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <lineSet+0x368>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 80d3 	bne.w	8000d90 <lineSet+0x380>
				status = checkStatus();
 8000bea:	f7ff fe1d 	bl	8000828 <checkStatus>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <lineSet+0x35c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bf6:	e0cb      	b.n	8000d90 <lineSet+0x380>
		case START:
			if(button_count == 1){
 8000bf8:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <lineSet+0x360>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 80c9 	bne.w	8000d94 <lineSet+0x384>
				index = 0;
 8000c02:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <lineSet+0x36c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
				status = GET_STATUS;
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <lineSet+0x35c>)
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	701a      	strb	r2, [r3, #0]
//				status = FOLLOW;
			}
			break;
 8000c0e:	e0c1      	b.n	8000d94 <lineSet+0x384>
		case FORWARD:
			if(followLineUntilCross() == 1) {
 8000c10:	f7ff fe8e 	bl	8000930 <followLineUntilCross>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	f040 80be 	bne.w	8000d98 <lineSet+0x388>
				status = GET_STATUS;
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <lineSet+0x35c>)
 8000c1e:	2215      	movs	r2, #21
 8000c20:	701a      	strb	r2, [r3, #0]
				count = 100;
 8000c22:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <lineSet+0x368>)
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	701a      	strb	r2, [r3, #0]
//			if(checkLine() == LINE_CENTER){
//				status = ENDWARDS;
//				stop();
//				count = 20;
//			}
			break;
 8000c28:	e0b6      	b.n	8000d98 <lineSet+0x388>
		case READYBACKWARDS:
			backwards();
 8000c2a:	f000 fa63 	bl	80010f4 <backwards>
			if(checkLine() >= 3){
 8000c2e:	f7ff fd8f 	bl	8000750 <checkLine>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	f240 80b1 	bls.w	8000d9c <lineSet+0x38c>
				status = READYBACKWARDS2;
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <lineSet+0x35c>)
 8000c3c:	2275      	movs	r2, #117	; 0x75
 8000c3e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c40:	e0ac      	b.n	8000d9c <lineSet+0x38c>
		case READYBACKWARDS2:
			backwards();
 8000c42:	f000 fa57 	bl	80010f4 <backwards>
			if(checkLine() < 2){
 8000c46:	f7ff fd83 	bl	8000750 <checkLine>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f200 80a7 	bhi.w	8000da0 <lineSet+0x390>
				status = BACKWARD;
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <lineSet+0x35c>)
 8000c54:	226b      	movs	r2, #107	; 0x6b
 8000c56:	701a      	strb	r2, [r3, #0]
				stop();
 8000c58:	f000 fa30 	bl	80010bc <stop>
			}
			break;
 8000c5c:	e0a0      	b.n	8000da0 <lineSet+0x390>
		case BACKWARD:
			backwards();
 8000c5e:	f000 fa49 	bl	80010f4 <backwards>
			if(checkLine() >= 3){
 8000c62:	f7ff fd75 	bl	8000750 <checkLine>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	f240 809b 	bls.w	8000da4 <lineSet+0x394>
				status = ENDBACK;
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <lineSet+0x35c>)
 8000c70:	2276      	movs	r2, #118	; 0x76
 8000c72:	701a      	strb	r2, [r3, #0]
				stop();
 8000c74:	f000 fa22 	bl	80010bc <stop>
				count = 20;
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <lineSet+0x368>)
 8000c7a:	2214      	movs	r2, #20
 8000c7c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c7e:	e091      	b.n	8000da4 <lineSet+0x394>
		case ENDBACK:
			count--;
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <lineSet+0x368>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <lineSet+0x368>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			if(count <= 0){
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <lineSet+0x368>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f040 8089 	bne.w	8000da8 <lineSet+0x398>
				if(checkLine() >= 3){
 8000c96:	f7ff fd5b 	bl	8000750 <checkLine>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d907      	bls.n	8000cb0 <lineSet+0x2a0>
					status = ENDWARDS;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <lineSet+0x35c>)
 8000ca2:	2273      	movs	r2, #115	; 0x73
 8000ca4:	701a      	strb	r2, [r3, #0]
					stop();
 8000ca6:	f000 fa09 	bl	80010bc <stop>
					count = 20;
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <lineSet+0x368>)
 8000cac:	2214      	movs	r2, #20
 8000cae:	701a      	strb	r2, [r3, #0]
				}
				if(checkLine() < 3){
 8000cb0:	f7ff fd4e 	bl	8000750 <checkLine>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d876      	bhi.n	8000da8 <lineSet+0x398>
					status = FORWARD;
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <lineSet+0x35c>)
 8000cbc:	226a      	movs	r2, #106	; 0x6a
 8000cbe:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8000cc0:	e072      	b.n	8000da8 <lineSet+0x398>
		case ENDWARDS:
			count--;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <lineSet+0x368>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <lineSet+0x368>)
 8000ccc:	701a      	strb	r2, [r3, #0]
			if(count <= 0){
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <lineSet+0x368>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d16a      	bne.n	8000dac <lineSet+0x39c>
				if(checkLine() >= 3)
 8000cd6:	f7ff fd3b 	bl	8000750 <checkLine>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d902      	bls.n	8000ce6 <lineSet+0x2d6>
					forward();
 8000ce0:	f000 f9f8 	bl	80010d4 <forward>
				else{
					stop();
					status = checkStatus();
				}
			}
			break;
 8000ce4:	e062      	b.n	8000dac <lineSet+0x39c>
					stop();
 8000ce6:	f000 f9e9 	bl	80010bc <stop>
					status = checkStatus();
 8000cea:	f7ff fd9d 	bl	8000828 <checkStatus>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <lineSet+0x35c>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			break;
 8000cf6:	e059      	b.n	8000dac <lineSet+0x39c>
		case TURNLEFT:
//			left();
//			if(sensor_buffer == 0b10000){
//				status = ENDLEFT;
//			}
			if(turnLeftUntilLine() == 1) {
 8000cf8:	f7ff fe3e 	bl	8000978 <turnLeftUntilLine>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d156      	bne.n	8000db0 <lineSet+0x3a0>
				status = GET_STATUS;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <lineSet+0x35c>)
 8000d04:	2215      	movs	r2, #21
 8000d06:	701a      	strb	r2, [r3, #0]
				count = 100;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <lineSet+0x368>)
 8000d0a:	2264      	movs	r2, #100	; 0x64
 8000d0c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d0e:	e04f      	b.n	8000db0 <lineSet+0x3a0>
		case ENDLEFT:
			left();
 8000d10:	f000 fa10 	bl	8001134 <left>
			if(sensor_buffer == 0b00100){
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <lineSet+0x370>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d14b      	bne.n	8000db4 <lineSet+0x3a4>
				stop();
 8000d1c:	f000 f9ce 	bl	80010bc <stop>
				status = checkStatus();
 8000d20:	f7ff fd82 	bl	8000828 <checkStatus>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <lineSet+0x35c>)
 8000d2a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d2c:	e042      	b.n	8000db4 <lineSet+0x3a4>
		case TURNRIGHT:
//			right();
//			if(sensor_buffer == 0b00001){
//				status = ENDRIGHT;
//			}
			if(turnRightUntilLine() == 1) {
 8000d2e:	f7ff fe49 	bl	80009c4 <turnRightUntilLine>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d13f      	bne.n	8000db8 <lineSet+0x3a8>
				status = GET_STATUS;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <lineSet+0x35c>)
 8000d3a:	2215      	movs	r2, #21
 8000d3c:	701a      	strb	r2, [r3, #0]
				count = 100;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <lineSet+0x368>)
 8000d40:	2264      	movs	r2, #100	; 0x64
 8000d42:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d44:	e038      	b.n	8000db8 <lineSet+0x3a8>
		case ENDRIGHT:
			right();
 8000d46:	f000 f9e5 	bl	8001114 <right>
			if(sensor_buffer == 0b00100){
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <lineSet+0x370>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d134      	bne.n	8000dbc <lineSet+0x3ac>
				stop();
 8000d52:	f000 f9b3 	bl	80010bc <stop>
				status = checkStatus();
 8000d56:	f7ff fd67 	bl	8000828 <checkStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <lineSet+0x35c>)
 8000d60:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d62:	e02b      	b.n	8000dbc <lineSet+0x3ac>
		case STOP:
			stop();
 8000d64:	f000 f9aa 	bl	80010bc <stop>
			break;
 8000d68:	e029      	b.n	8000dbe <lineSet+0x3ae>
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000070 	.word	0x20000070
 8000d74:	20000038 	.word	0x20000038
 8000d78:	20000064 	.word	0x20000064
 8000d7c:	20000065 	.word	0x20000065
 8000d80:	20000068 	.word	0x20000068
		default:
			status = FORWARD_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <lineSet+0x3b4>)
 8000d86:	2264      	movs	r2, #100	; 0x64
 8000d88:	701a      	strb	r2, [r3, #0]
			break;
 8000d8a:	e018      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000d8c:	bf00      	nop
 8000d8e:	e016      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000d90:	bf00      	nop
 8000d92:	e014      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000d94:	bf00      	nop
 8000d96:	e012      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000d98:	bf00      	nop
 8000d9a:	e010      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000d9c:	bf00      	nop
 8000d9e:	e00e      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000da0:	bf00      	nop
 8000da2:	e00c      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000da4:	bf00      	nop
 8000da6:	e00a      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000da8:	bf00      	nop
 8000daa:	e008      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000dac:	bf00      	nop
 8000dae:	e006      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000db0:	bf00      	nop
 8000db2:	e004      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000db4:	bf00      	nop
 8000db6:	e002      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000db8:	bf00      	nop
 8000dba:	e000      	b.n	8000dbe <lineSet+0x3ae>
			break;
 8000dbc:	bf00      	nop
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <setSpeed>:
 */
#include "move_driver.h"

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <setSpeed+0x70>)
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	7013      	strb	r3, [r2, #0]
	switch (dc){
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d822      	bhi.n	8000e38 <setSpeed+0x64>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <setSpeed+0x24>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e09 	.word	0x08000e09
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e21 	.word	0x08000e21
 8000e04:	08000e2d 	.word	0x08000e2d
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed_duty_cycle);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <setSpeed+0x70>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <setSpeed+0x74>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000e12:	e011      	b.n	8000e38 <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, speed_duty_cycle);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <setSpeed+0x70>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <setSpeed+0x74>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000e1e:	e00b      	b.n	8000e38 <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed_duty_cycle);
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <setSpeed+0x70>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <setSpeed+0x74>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000e2a:	e005      	b.n	8000e38 <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed_duty_cycle);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <setSpeed+0x70>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <setSpeed+0x74>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000e36:	bf00      	nop
	}
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000084 	.word	0x20000084
 8000e48:	20000128 	.word	0x20000128

08000e4c <dc1Forward>:

void dc1Forward(uint8_t duty_cycle){ //tiến
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC1_GPIO_Port, IN1_DC1_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <dc1Forward+0x34>)
 8000e5e:	f001 fc0c 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC1_GPIO_Port, IN2_DC1_Pin, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <dc1Forward+0x34>)
 8000e6a:	f001 fc06 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(1, duty_cycle);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4619      	mov	r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ffae 	bl	8000dd4 <setSpeed>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <dc1Backwards>:

void dc1Backwards(uint8_t duty_cycle){ //lùi
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC1_GPIO_Port, IN1_DC1_Pin, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <dc1Backwards+0x34>)
 8000e96:	f001 fbf0 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC1_GPIO_Port, IN2_DC1_Pin, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <dc1Backwards+0x34>)
 8000ea2:	f001 fbea 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(1, duty_cycle);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff ff92 	bl	8000dd4 <setSpeed>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <dc1Stop>:

void dc1Stop(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IN1_DC1_GPIO_Port, IN1_DC1_Pin, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <dc1Stop+0x28>)
 8000ec8:	f001 fbd7 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC1_GPIO_Port, IN2_DC1_Pin, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <dc1Stop+0x28>)
 8000ed4:	f001 fbd1 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(1, 0);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff ff7a 	bl	8000dd4 <setSpeed>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <dc2Forward>:

void dc2Forward(uint8_t duty_cycle){ //tiến
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC2_GPIO_Port, IN1_DC2_Pin, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <dc2Forward+0x34>)
 8000efa:	f001 fbbe 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC2_GPIO_Port, IN2_DC2_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <dc2Forward+0x34>)
 8000f06:	f001 fbb8 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(2, duty_cycle);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff ff60 	bl	8000dd4 <setSpeed>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <dc2Backwards>:

void dc2Backwards(uint8_t duty_cycle){ //lùi
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC2_GPIO_Port, IN1_DC2_Pin, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <dc2Backwards+0x34>)
 8000f32:	f001 fba2 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC2_GPIO_Port, IN2_DC2_Pin, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <dc2Backwards+0x34>)
 8000f3e:	f001 fb9c 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(2, duty_cycle);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4619      	mov	r1, r3
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff ff44 	bl	8000dd4 <setSpeed>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <dc2Stop>:

void dc2Stop(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IN1_DC2_GPIO_Port, IN1_DC2_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <dc2Stop+0x28>)
 8000f64:	f001 fb89 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC2_GPIO_Port, IN2_DC2_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <dc2Stop+0x28>)
 8000f70:	f001 fb83 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(2, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff ff2c 	bl	8000dd4 <setSpeed>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010c00 	.word	0x40010c00

08000f84 <dc3Forward>:

void dc3Forward(uint8_t duty_cycle){ //tiến
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_DC3_GPIO_Port, IN1_DC3_Pin, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <dc3Forward+0x34>)
 8000f96:	f001 fb70 	bl	800267a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DC3_GPIO_Port, IN2_DC3_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <dc3Forward+0x34>)
 8000fa2:	f001 fb6a 	bl	800267a <HAL_GPIO_WritePin>
	setSpeed(3, duty_cycle);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2003      	movs	r0, #3
 8000fac:	f7ff ff12 	bl	8000dd4 <setSpeed>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <dc3Backwards>:

void dc3Backwards(uint8_t duty_cycle){ //lùi
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC3_GPIO_Port, IN1_DC3_Pin, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <dc3Backwards+0x34>)
 8000fce:	f001 fb54 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC3_GPIO_Port, IN2_DC3_Pin, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <dc3Backwards+0x34>)
 8000fda:	f001 fb4e 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(3, duty_cycle);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f7ff fef6 	bl	8000dd4 <setSpeed>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <dc3Stop>:

void dc3Stop(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IN1_DC3_GPIO_Port, IN1_DC3_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <dc3Stop+0x28>)
 8001000:	f001 fb3b 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC3_GPIO_Port, IN2_DC3_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <dc3Stop+0x28>)
 800100c:	f001 fb35 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(3, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff fede 	bl	8000dd4 <setSpeed>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010c00 	.word	0x40010c00

08001020 <dc4Forward>:

void dc4Forward(uint8_t duty_cycle){ //tiến
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC4_GPIO_Port, IN1_DC4_Pin, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <dc4Forward+0x34>)
 8001032:	f001 fb22 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC4_GPIO_Port, IN2_DC4_Pin, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <dc4Forward+0x34>)
 800103e:	f001 fb1c 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(4, duty_cycle);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4619      	mov	r1, r3
 8001046:	2004      	movs	r0, #4
 8001048:	f7ff fec4 	bl	8000dd4 <setSpeed>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010800 	.word	0x40010800

08001058 <dc4Backwards>:

void dc4Backwards(uint8_t duty_cycle){ //lùi
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_DC4_GPIO_Port, IN1_DC4_Pin, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <dc4Backwards+0x34>)
 800106a:	f001 fb06 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC4_GPIO_Port, IN2_DC4_Pin, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <dc4Backwards+0x34>)
 8001076:	f001 fb00 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(4, duty_cycle);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	2004      	movs	r0, #4
 8001080:	f7ff fea8 	bl	8000dd4 <setSpeed>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010800 	.word	0x40010800

08001090 <dc4Stop>:

void dc4Stop(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IN1_DC4_GPIO_Port, IN1_DC4_Pin, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <dc4Stop+0x28>)
 800109c:	f001 faed 	bl	800267a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_DC4_GPIO_Port, IN2_DC4_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <dc4Stop+0x28>)
 80010a8:	f001 fae7 	bl	800267a <HAL_GPIO_WritePin>
  setSpeed(4, 0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2004      	movs	r0, #4
 80010b0:	f7ff fe90 	bl	8000dd4 <setSpeed>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010800 	.word	0x40010800

080010bc <stop>:

void stop(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	dc1Stop();
 80010c0:	f7ff fefc 	bl	8000ebc <dc1Stop>
	dc2Stop();
 80010c4:	f7ff ff48 	bl	8000f58 <dc2Stop>
	dc3Stop();
 80010c8:	f7ff ff94 	bl	8000ff4 <dc3Stop>
	dc4Stop();
 80010cc:	f7ff ffe0 	bl	8001090 <dc4Stop>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <forward>:

void forward(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	dc1Forward(60);
 80010d8:	203c      	movs	r0, #60	; 0x3c
 80010da:	f7ff feb7 	bl	8000e4c <dc1Forward>
	dc2Forward(60);
 80010de:	203c      	movs	r0, #60	; 0x3c
 80010e0:	f7ff ff02 	bl	8000ee8 <dc2Forward>
	dc3Forward(60);
 80010e4:	203c      	movs	r0, #60	; 0x3c
 80010e6:	f7ff ff4d 	bl	8000f84 <dc3Forward>
	dc4Forward(60);
 80010ea:	203c      	movs	r0, #60	; 0x3c
 80010ec:	f7ff ff98 	bl	8001020 <dc4Forward>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <backwards>:

void backwards(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	dc1Backwards(60);
 80010f8:	203c      	movs	r0, #60	; 0x3c
 80010fa:	f7ff fec3 	bl	8000e84 <dc1Backwards>
	dc2Backwards(60);
 80010fe:	203c      	movs	r0, #60	; 0x3c
 8001100:	f7ff ff0e 	bl	8000f20 <dc2Backwards>
	dc3Backwards(60);
 8001104:	203c      	movs	r0, #60	; 0x3c
 8001106:	f7ff ff59 	bl	8000fbc <dc3Backwards>
	dc4Backwards(60);
 800110a:	203c      	movs	r0, #60	; 0x3c
 800110c:	f7ff ffa4 	bl	8001058 <dc4Backwards>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <right>:
	dc2Stop();
	dc3Stop();
//	stop();
}

void right(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	dc2Backwards(60);
 8001118:	203c      	movs	r0, #60	; 0x3c
 800111a:	f7ff ff01 	bl	8000f20 <dc2Backwards>
	dc3Backwards(60);
 800111e:	203c      	movs	r0, #60	; 0x3c
 8001120:	f7ff ff4c 	bl	8000fbc <dc3Backwards>
	dc1Forward(60);
 8001124:	203c      	movs	r0, #60	; 0x3c
 8001126:	f7ff fe91 	bl	8000e4c <dc1Forward>
	dc4Forward(60);
 800112a:	203c      	movs	r0, #60	; 0x3c
 800112c:	f7ff ff78 	bl	8001020 <dc4Forward>
//	stop();
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <left>:

void left(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	dc1Backwards(60);
 8001138:	203c      	movs	r0, #60	; 0x3c
 800113a:	f7ff fea3 	bl	8000e84 <dc1Backwards>
	dc4Backwards(60);
 800113e:	203c      	movs	r0, #60	; 0x3c
 8001140:	f7ff ff8a 	bl	8001058 <dc4Backwards>
	dc2Forward(60);
 8001144:	203c      	movs	r0, #60	; 0x3c
 8001146:	f7ff fecf 	bl	8000ee8 <dc2Forward>
	dc3Forward(60);
 800114a:	203c      	movs	r0, #60	; 0x3c
 800114c:	f7ff ff1a 	bl	8000f84 <dc3Forward>
//	stop();
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <rotateLeft>:

void rotateLeft(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	dc1Backwards(60);
 8001158:	203c      	movs	r0, #60	; 0x3c
 800115a:	f7ff fe93 	bl	8000e84 <dc1Backwards>
	dc3Backwards(60);
 800115e:	203c      	movs	r0, #60	; 0x3c
 8001160:	f7ff ff2c 	bl	8000fbc <dc3Backwards>
	dc2Forward(60);
 8001164:	203c      	movs	r0, #60	; 0x3c
 8001166:	f7ff febf 	bl	8000ee8 <dc2Forward>
	dc4Forward(60);
 800116a:	203c      	movs	r0, #60	; 0x3c
 800116c:	f7ff ff58 	bl	8001020 <dc4Forward>
//	stop();
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <rotateRight>:

void rotateRight(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	dc2Backwards(60);
 8001178:	203c      	movs	r0, #60	; 0x3c
 800117a:	f7ff fed1 	bl	8000f20 <dc2Backwards>
	dc4Backwards(60);
 800117e:	203c      	movs	r0, #60	; 0x3c
 8001180:	f7ff ff6a 	bl	8001058 <dc4Backwards>
	dc1Forward(60);
 8001184:	203c      	movs	r0, #60	; 0x3c
 8001186:	f7ff fe61 	bl	8000e4c <dc1Forward>
	dc3Forward(60);
 800118a:	203c      	movs	r0, #60	; 0x3c
 800118c:	f7ff fefa 	bl	8000f84 <dc3Forward>
//	stop();
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 800119e:	4907      	ldr	r1, [pc, #28]	; (80011bc <setTimer+0x28>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <setTimer+0x2c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2100      	movs	r1, #0
 80011ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000088 	.word	0x20000088
 80011c0:	200000d8 	.word	0x200000d8

080011c4 <timerRun>:

void timerRun(int index){
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <timerRun+0x48>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	dd13      	ble.n	8001200 <timerRun+0x3c>
		timer_counter[index]--;
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <timerRun+0x48>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <timerRun+0x48>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <timerRun+0x48>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc04      	bgt.n	8001200 <timerRun+0x3c>
			timer_flag[index] = 1;
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <timerRun+0x4c>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2101      	movs	r1, #1
 80011fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000088 	.word	0x20000088
 8001210:	200000d8 	.word	0x200000d8

08001214 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_MspInit+0x5c>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_MspInit+0x5c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_MspInit+0x5c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x5c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_MspInit+0x5c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_MspInit+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_MspInit+0x60>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_MspInit+0x60>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000

08001278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_ADC_MspInit+0xbc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d149      	bne.n	800132c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_ADC_MspInit+0xc0>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012c8:	233e      	movs	r3, #62	; 0x3e
 80012ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4819      	ldr	r0, [pc, #100]	; (800133c <HAL_ADC_MspInit+0xc4>)
 80012d8:	f001 f834 	bl	8002344 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012de:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001302:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 8001306:	2220      	movs	r2, #32
 8001308:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 8001312:	f000 fe29 	bl	8001f68 <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800131c:	f7ff fd54 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 8001324:	621a      	str	r2, [r3, #32]
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_ADC_MspInit+0xc8>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40012400 	.word	0x40012400
 8001338:	40021000 	.word	0x40021000
 800133c:	40010800 	.word	0x40010800
 8001340:	200001a0 	.word	0x200001a0
 8001344:	40020008 	.word	0x40020008

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d114      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201c      	movs	r0, #28
 8001378:	f000 fdbf 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137c:	201c      	movs	r0, #28
 800137e:	f000 fdd8 	bl	8001f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001382:	e010      	b.n	80013a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10b      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40000800 	.word	0x40000800

080013b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_TIM_MspPostInit+0x5c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d118      	bne.n	800140a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_TIM_MspPostInit+0x60>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_TIM_MspPostInit+0x60>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_TIM_MspPostInit+0x60>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_TIM_MspPostInit+0x64>)
 8001406:	f000 ff9d 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40000800 	.word	0x40000800
 8001418:	40021000 	.word	0x40021000
 800141c:	40010c00 	.word	0x40010c00

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f889 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Channel1_IRQHandler+0x10>)
 8001476:	f000 fe31 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001a0 	.word	0x200001a0

08001484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM2_IRQHandler+0x10>)
 800148a:	f001 ff55 	bl	8003338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0

08001498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fff8 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014aa:	490c      	ldr	r1, [pc, #48]	; (80014dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c0:	4c09      	ldr	r4, [pc, #36]	; (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f002 fcfd 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7fe fe3b 	bl	800014c <main>
  bx lr
 80014d6:	4770      	bx	lr
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80014e0:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 80014e4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80014e8:	20000248 	.word	0x20000248

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x28>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x28>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 fcef 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fe82 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fd07 	bl	8001f4e <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 fccf 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000003c 	.word	0x2000003c
 8001574:	20000044 	.word	0x20000044
 8001578:	20000040 	.word	0x20000040

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_IncTick+0x20>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000044 	.word	0x20000044
 800159c:	20000244 	.word	0x20000244

080015a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_GetTick+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000244 	.word	0x20000244

080015b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0be      	b.n	8001754 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fe40 	bl	8001278 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 faff 	bl	8001bfc <ADC_ConversionStop_Disable>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8099 	bne.w	8001742 <HAL_ADC_Init+0x18e>
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8095 	bne.w	8001742 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001620:	f023 0302 	bic.w	r3, r3, #2
 8001624:	f043 0202 	orr.w	r2, r3, #2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001634:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800163c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d003      	beq.n	8001656 <HAL_ADC_Init+0xa2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_ADC_Init+0xa8>
 8001656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165a:	e000      	b.n	800165e <HAL_ADC_Init+0xaa>
 800165c:	2300      	movs	r3, #0
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7d1b      	ldrb	r3, [r3, #20]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d119      	bne.n	80016a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	3b01      	subs	r3, #1
 800167a:	035a      	lsls	r2, r3, #13
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e00b      	b.n	80016a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f043 0220 	orr.w	r2, r3, #32
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_ADC_Init+0x1a8>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d0:	d003      	beq.n	80016da <HAL_ADC_Init+0x126>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d104      	bne.n	80016e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	3b01      	subs	r3, #1
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_ADC_Init+0x1ac>)
 8001700:	4013      	ands	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	d10b      	bne.n	8001720 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171e:	e018      	b.n	8001752 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f023 0312 	bic.w	r3, r3, #18
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f043 0210 	orr.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001752:	7dfb      	ldrb	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	ffe1f7fd 	.word	0xffe1f7fd
 8001760:	ff1f0efe 	.word	0xff1f0efe

08001764 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a64      	ldr	r2, [pc, #400]	; (800190c <HAL_ADC_Start_DMA+0x1a8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <HAL_ADC_Start_DMA+0x24>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_ADC_Start_DMA+0x1ac>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d106      	bne.n	8001796 <HAL_ADC_Start_DMA+0x32>
 8001788:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_ADC_Start_DMA+0x1a8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 80b3 	bne.w	80018fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_Start_DMA+0x40>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e0ae      	b.n	8001902 <HAL_ADC_Start_DMA+0x19e>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f9cb 	bl	8001b48 <ADC_Enable>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 809a 	bne.w	80018f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_ADC_Start_DMA+0x1ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_Start_DMA+0x84>
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <HAL_ADC_Start_DMA+0x1a8>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d115      	bne.n	8001814 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800180a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001812:	e01d      	b.n	8001850 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a39      	ldr	r2, [pc, #228]	; (800190c <HAL_ADC_Start_DMA+0x1a8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d004      	beq.n	8001834 <HAL_ADC_Start_DMA+0xd0>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_ADC_Start_DMA+0x1ac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d10d      	bne.n	8001850 <HAL_ADC_Start_DMA+0xec>
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_ADC_Start_DMA+0x1a8>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001848:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f023 0206 	bic.w	r2, r3, #6
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a25      	ldr	r2, [pc, #148]	; (8001914 <HAL_ADC_Start_DMA+0x1b0>)
 800187e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_ADC_Start_DMA+0x1b4>)
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_ADC_Start_DMA+0x1b8>)
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0202 	mvn.w	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a18      	ldr	r0, [r3, #32]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	334c      	adds	r3, #76	; 0x4c
 80018b4:	4619      	mov	r1, r3
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f000 fbaf 	bl	800201c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018cc:	d108      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018de:	e00f      	b.n	8001900 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018f0:	e006      	b.n	8001900 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80018fa:	e001      	b.n	8001900 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40012400 	.word	0x40012400
 8001910:	40012800 	.word	0x40012800
 8001914:	08001c7f 	.word	0x08001c7f
 8001918:	08001cfb 	.word	0x08001cfb
 800191c:	08001d17 	.word	0x08001d17

08001920 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0dc      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d81c      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b05      	subs	r3, #5
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
 80019c0:	e03c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d81c      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	; 0x23
 80019dc:	221f      	movs	r2, #31
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4019      	ands	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e01b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1b2>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	2000003c 	.word	0x2000003c
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d040      	beq.n	8001be8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <ADC_Enable+0xac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <ADC_Enable+0xb0>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b84:	e002      	b.n	8001b8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fd05 	bl	80015a0 <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b98:	e01f      	b.n	8001bda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b9a:	f7ff fd01 	bl	80015a0 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d918      	bls.n	8001bda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d011      	beq.n	8001bda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e007      	b.n	8001bea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d1d8      	bne.n	8001b9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000003c 	.word	0x2000003c
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12e      	bne.n	8001c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c26:	f7ff fcbb 	bl	80015a0 <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c2c:	e01b      	b.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c2e:	f7ff fcb7 	bl	80015a0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d914      	bls.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10d      	bne.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d0dc      	beq.n	8001c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d127      	bne.n	8001ce8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cb2:	d115      	bne.n	8001ce0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d111      	bne.n	8001ce0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fe1d 	bl	8001920 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ce6:	e004      	b.n	8001cf2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fe12 	bl	8001932 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fe01 	bl	8001944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4906      	ldr	r1, [pc, #24]	; (8001de4 <__NVIC_EnableIRQ+0x34>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff90 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff2d 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff42 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff90 	bl	8001e3c <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5f 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff35 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e043      	b.n	8002006 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_DMA_Init+0xa8>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_DMA_Init+0xac>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	009a      	lsls	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_DMA_Init+0xb0>)
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	bffdfff8 	.word	0xbffdfff8
 8002014:	cccccccd 	.word	0xcccccccd
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_DMA_Start_IT+0x20>
 8002038:	2302      	movs	r3, #2
 800203a:	e04b      	b.n	80020d4 <HAL_DMA_Start_IT+0xb8>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d13a      	bne.n	80020c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f937 	bl	80022e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 020e 	orr.w	r2, r2, #14
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e00f      	b.n	80020b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0204 	bic.w	r2, r2, #4
 80020a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 020a 	orr.w	r2, r2, #10
 80020b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e005      	b.n	80020d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2204      	movs	r2, #4
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d04f      	beq.n	80021a4 <HAL_DMA_IRQHandler+0xc8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d04a      	beq.n	80021a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_DMA_IRQHandler+0x1f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d029      	beq.n	800218a <HAL_DMA_IRQHandler+0xae>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_DMA_IRQHandler+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d022      	beq.n	8002186 <HAL_DMA_IRQHandler+0xaa>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01a      	beq.n	8002180 <HAL_DMA_IRQHandler+0xa4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d012      	beq.n	800217a <HAL_DMA_IRQHandler+0x9e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a60      	ldr	r2, [pc, #384]	; (80022dc <HAL_DMA_IRQHandler+0x200>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00a      	beq.n	8002174 <HAL_DMA_IRQHandler+0x98>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <HAL_DMA_IRQHandler+0x204>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_DMA_IRQHandler+0x92>
 8002168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216c:	e00e      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 800216e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002172:	e00b      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 8002174:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002178:	e008      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	e005      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 8002180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002184:	e002      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 8002186:	2340      	movs	r3, #64	; 0x40
 8002188:	e000      	b.n	800218c <HAL_DMA_IRQHandler+0xb0>
 800218a:	2304      	movs	r3, #4
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_DMA_IRQHandler+0x208>)
 800218e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8094 	beq.w	80022c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021a2:	e08e      	b.n	80022c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2202      	movs	r2, #2
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d056      	beq.n	8002262 <HAL_DMA_IRQHandler+0x186>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d051      	beq.n	8002262 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020a 	bic.w	r2, r2, #10
 80021da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a38      	ldr	r2, [pc, #224]	; (80022cc <HAL_DMA_IRQHandler+0x1f0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d029      	beq.n	8002242 <HAL_DMA_IRQHandler+0x166>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a37      	ldr	r2, [pc, #220]	; (80022d0 <HAL_DMA_IRQHandler+0x1f4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_IRQHandler+0x162>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a35      	ldr	r2, [pc, #212]	; (80022d4 <HAL_DMA_IRQHandler+0x1f8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01a      	beq.n	8002238 <HAL_DMA_IRQHandler+0x15c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d012      	beq.n	8002232 <HAL_DMA_IRQHandler+0x156>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_DMA_IRQHandler+0x200>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00a      	beq.n	800222c <HAL_DMA_IRQHandler+0x150>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <HAL_DMA_IRQHandler+0x204>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d102      	bne.n	8002226 <HAL_DMA_IRQHandler+0x14a>
 8002220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002224:	e00e      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	e00b      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	e008      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	e005      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 8002238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223c:	e002      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 800223e:	2320      	movs	r3, #32
 8002240:	e000      	b.n	8002244 <HAL_DMA_IRQHandler+0x168>
 8002242:	2302      	movs	r3, #2
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_DMA_IRQHandler+0x208>)
 8002246:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d034      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002260:	e02f      	b.n	80022c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2208      	movs	r2, #8
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d028      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x1e8>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d023      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
    }
  }
  return;
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
}
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40020008 	.word	0x40020008
 80022d0:	4002001c 	.word	0x4002001c
 80022d4:	40020030 	.word	0x40020030
 80022d8:	40020044 	.word	0x40020044
 80022dc:	40020058 	.word	0x40020058
 80022e0:	4002006c 	.word	0x4002006c
 80022e4:	40020000 	.word	0x40020000

080022e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d108      	bne.n	8002328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002326:	e007      	b.n	8002338 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b08b      	sub	sp, #44	; 0x2c
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e169      	b.n	800262c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002358:	2201      	movs	r2, #1
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 8158 	bne.w	8002626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a9a      	ldr	r2, [pc, #616]	; (80025e4 <HAL_GPIO_Init+0x2a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d05e      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002380:	4a98      	ldr	r2, [pc, #608]	; (80025e4 <HAL_GPIO_Init+0x2a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d875      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002386:	4a98      	ldr	r2, [pc, #608]	; (80025e8 <HAL_GPIO_Init+0x2a4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d058      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 800238c:	4a96      	ldr	r2, [pc, #600]	; (80025e8 <HAL_GPIO_Init+0x2a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d86f      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002392:	4a96      	ldr	r2, [pc, #600]	; (80025ec <HAL_GPIO_Init+0x2a8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d052      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002398:	4a94      	ldr	r2, [pc, #592]	; (80025ec <HAL_GPIO_Init+0x2a8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d869      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 800239e:	4a94      	ldr	r2, [pc, #592]	; (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04c      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023a4:	4a92      	ldr	r2, [pc, #584]	; (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d863      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023aa:	4a92      	ldr	r2, [pc, #584]	; (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d046      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023b0:	4a90      	ldr	r2, [pc, #576]	; (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d85d      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d82a      	bhi.n	8002410 <HAL_GPIO_Init+0xcc>
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d859      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_GPIO_Init+0x80>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	08002419 	.word	0x08002419
 80023cc:	0800242b 	.word	0x0800242b
 80023d0:	0800246d 	.word	0x0800246d
 80023d4:	08002473 	.word	0x08002473
 80023d8:	08002473 	.word	0x08002473
 80023dc:	08002473 	.word	0x08002473
 80023e0:	08002473 	.word	0x08002473
 80023e4:	08002473 	.word	0x08002473
 80023e8:	08002473 	.word	0x08002473
 80023ec:	08002473 	.word	0x08002473
 80023f0:	08002473 	.word	0x08002473
 80023f4:	08002473 	.word	0x08002473
 80023f8:	08002473 	.word	0x08002473
 80023fc:	08002473 	.word	0x08002473
 8002400:	08002473 	.word	0x08002473
 8002404:	08002473 	.word	0x08002473
 8002408:	08002421 	.word	0x08002421
 800240c:	08002435 	.word	0x08002435
 8002410:	4a79      	ldr	r2, [pc, #484]	; (80025f8 <HAL_GPIO_Init+0x2b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002416:	e02c      	b.n	8002472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	623b      	str	r3, [r7, #32]
          break;
 800241e:	e029      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e024      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	3308      	adds	r3, #8
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e01f      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	330c      	adds	r3, #12
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e01a      	b.n	8002474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002446:	2304      	movs	r3, #4
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e013      	b.n	8002474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	611a      	str	r2, [r3, #16]
          break;
 800245e:	e009      	b.n	8002474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002460:	2308      	movs	r3, #8
 8002462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	615a      	str	r2, [r3, #20]
          break;
 800246a:	e003      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
          break;
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x130>
          break;
 8002472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2bff      	cmp	r3, #255	; 0xff
 8002478:	d801      	bhi.n	800247e <HAL_GPIO_Init+0x13a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_Init+0x13e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d802      	bhi.n	8002490 <HAL_GPIO_Init+0x14c>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x152>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3b08      	subs	r3, #8
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	210f      	movs	r1, #15
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	6a39      	ldr	r1, [r7, #32]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	431a      	orrs	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80b1 	beq.w	8002626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024dc:	4a48      	ldr	r2, [pc, #288]	; (8002600 <HAL_GPIO_Init+0x2bc>)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a40      	ldr	r2, [pc, #256]	; (8002604 <HAL_GPIO_Init+0x2c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1ec>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3f      	ldr	r2, [pc, #252]	; (8002608 <HAL_GPIO_Init+0x2c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1e8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3e      	ldr	r2, [pc, #248]	; (800260c <HAL_GPIO_Init+0x2c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1e4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3d      	ldr	r2, [pc, #244]	; (8002610 <HAL_GPIO_Init+0x2cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1e0>
 8002520:	2303      	movs	r3, #3
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002524:	2304      	movs	r3, #4
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002528:	2302      	movs	r3, #2
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	492f      	ldr	r1, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x2bc>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	492c      	ldr	r1, [pc, #176]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4928      	ldr	r1, [pc, #160]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	491e      	ldr	r1, [pc, #120]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4914      	ldr	r1, [pc, #80]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d021      	beq.n	8002618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e021      	b.n	8002626 <HAL_GPIO_Init+0x2e2>
 80025e2:	bf00      	nop
 80025e4:	10320000 	.word	0x10320000
 80025e8:	10310000 	.word	0x10310000
 80025ec:	10220000 	.word	0x10220000
 80025f0:	10210000 	.word	0x10210000
 80025f4:	10120000 	.word	0x10120000
 80025f8:	10110000 	.word	0x10110000
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	40010800 	.word	0x40010800
 8002608:	40010c00 	.word	0x40010c00
 800260c:	40011000 	.word	0x40011000
 8002610:	40011400 	.word	0x40011400
 8002614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_GPIO_Init+0x304>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae8e 	bne.w	8002358 <HAL_GPIO_Init+0x14>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	372c      	adds	r7, #44	; 0x2c
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]
 8002686:	4613      	mov	r3, r2
 8002688:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268a:	787b      	ldrb	r3, [r7, #1]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002696:	e003      	b.n	80026a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	041a      	lsls	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	611a      	str	r2, [r3, #16]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026bc:	887a      	ldrh	r2, [r7, #2]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	041a      	lsls	r2, r3, #16
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	400b      	ands	r3, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e26c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8087 	beq.w	800280a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00c      	beq.n	8002722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d10b      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d06c      	beq.n	8002808 <HAL_RCC_OscConfig+0x12c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d168      	bne.n	8002808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e246      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x76>
 8002744:	4b80      	ldr	r3, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a7f      	ldr	r2, [pc, #508]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b78      	ldr	r3, [pc, #480]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a77      	ldr	r2, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0xbc>
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a71      	ldr	r2, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a67      	ldr	r2, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fef2 	bl	80015a0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe feee 	bl	80015a0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1fa      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe4>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fede 	bl	80015a0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe feda 	bl	80015a0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1e6      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x10c>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002816:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1ba      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4939      	ldr	r1, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x270>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fe93 	bl	80015a0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fe8f 	bl	80015a0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e19b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x270>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fe72 	bl	80015a0 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fe6e 	bl	80015a0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e17a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03a      	beq.n	8002960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d019      	beq.n	8002926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe fe52 	bl	80015a0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fe4e 	bl	80015a0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e15a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 fa9a 	bl	8002e58 <RCC_Delay>
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe fe38 	bl	80015a0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	e00f      	b.n	8002954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fe34 	bl	80015a0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d908      	bls.n	8002954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e140      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	42420000 	.word	0x42420000
 8002950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	4b9e      	ldr	r3, [pc, #632]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e9      	bne.n	8002934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a6 	beq.w	8002aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002972:	4b97      	ldr	r3, [pc, #604]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a93      	ldr	r2, [pc, #588]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a8a      	ldr	r2, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fdf5 	bl	80015a0 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fdf1 	bl	80015a0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0fd      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x312>
 80029e0:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e02d      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x334>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6213      	str	r3, [r2, #32]
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x356>
 8002a18:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a63      	ldr	r2, [pc, #396]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fda5 	bl	80015a0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fda1 	bl	80015a0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0ab      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x37e>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fd8f 	bl	80015a0 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fd8b 	bl	80015a0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e095      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a47      	ldr	r2, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8081 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d061      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d146      	bne.n	8002b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fd5f 	bl	80015a0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fd5b 	bl	80015a0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e067      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af8:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	492d      	ldr	r1, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a19      	ldr	r1, [r3, #32]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	430b      	orrs	r3, r1
 8002b32:	4927      	ldr	r1, [pc, #156]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fd2f 	bl	80015a0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fd2b 	bl	80015a0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e037      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46a>
 8002b64:	e02f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fd18 	bl	80015a0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fd14 	bl	80015a0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e020      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x498>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42420060 	.word	0x42420060

08002bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d0      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d910      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4965      	ldr	r1, [pc, #404]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b8      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	494d      	ldr	r1, [pc, #308]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d040      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d115      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e073      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4936      	ldr	r1, [pc, #216]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fc68 	bl	80015a0 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fc64 	bl	80015a0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e053      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d210      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4922      	ldr	r1, [pc, #136]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4916      	ldr	r1, [pc, #88]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490e      	ldr	r1, [pc, #56]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d6a:	f000 f821 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490a      	ldr	r1, [pc, #40]	; (8002da4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1d0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fbc6 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08003f3c 	.word	0x08003f3c
 8002da8:	2000003c 	.word	0x2000003c
 8002dac:	20000040 	.word	0x20000040

08002db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dde:	e027      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002de2:	613b      	str	r3, [r7, #16]
      break;
 8002de4:	e027      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0c5b      	lsrs	r3, r3, #17
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e12:	fb02 f203 	mul.w	r2, r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e004      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e32:	613b      	str	r3, [r7, #16]
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	693b      	ldr	r3, [r7, #16]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	007a1200 	.word	0x007a1200
 8002e4c:	08003f4c 	.word	0x08003f4c
 8002e50:	08003f5c 	.word	0x08003f5c
 8002e54:	003d0900 	.word	0x003d0900

08002e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <RCC_Delay+0x34>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <RCC_Delay+0x38>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e74:	bf00      	nop
  }
  while (Delay --);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	60fa      	str	r2, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <RCC_Delay+0x1c>
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	2000003c 	.word	0x2000003c
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d07d      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eca:	61d3      	str	r3, [r2, #28]
 8002ecc:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fb54 	bl	80015a0 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe fb50 	bl	80015a0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e06d      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02e      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d027      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fb1f 	bl	80015a0 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fb1b 	bl	80015a0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e036      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4917      	ldr	r1, [pc, #92]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	490b      	ldr	r1, [pc, #44]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42420440 	.word	0x42420440

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e041      	b.n	8003096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe f98e 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 fc30 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d001      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e03a      	b.n	800312e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_TIM_Base_Start_IT+0x98>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x58>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x58>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_TIM_Base_Start_IT+0x9c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x58>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_TIM_Base_Start_IT+0xa0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d010      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	e007      	b.n	800312c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800

08003144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e041      	b.n	80031da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f839 	bl	80031e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 fb8e 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_TIM_PWM_Start+0x24>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e022      	b.n	800325e <HAL_TIM_PWM_Start+0x6a>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d109      	bne.n	8003232 <HAL_TIM_PWM_Start+0x3e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e015      	b.n	800325e <HAL_TIM_PWM_Start+0x6a>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x58>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e008      	b.n	800325e <HAL_TIM_PWM_Start+0x6a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e05e      	b.n	8003324 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start+0x82>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	e013      	b.n	800329e <HAL_TIM_PWM_Start+0xaa>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start+0x92>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003284:	e00b      	b.n	800329e <HAL_TIM_PWM_Start+0xaa>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start+0xa2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	e003      	b.n	800329e <HAL_TIM_PWM_Start+0xaa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fd7c 	bl	8003da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_TIM_PWM_Start+0x138>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_TIM_PWM_Start+0x138>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_TIM_PWM_Start+0xfa>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d009      	beq.n	80032ee <HAL_TIM_PWM_Start+0xfa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_TIM_PWM_Start+0x13c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_TIM_PWM_Start+0xfa>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_TIM_PWM_Start+0x140>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d010      	beq.n	8003322 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	e007      	b.n	8003322 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800

08003338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0202 	mvn.w	r2, #2
 8003364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa76 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa69 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fa78 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0204 	mvn.w	r2, #4
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa4c 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa3f 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa4e 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d122      	bne.n	800343c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0208 	mvn.w	r2, #8
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa22 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa15 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa24 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b10      	cmp	r3, #16
 8003448:	d122      	bne.n	8003490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d11b      	bne.n	8003490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0210 	mvn.w	r2, #16
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2208      	movs	r2, #8
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9f8 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f9eb 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f9fa 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0201 	mvn.w	r2, #1
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd f8c8 	bl	800064c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fce9 	bl	8003eba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9be 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b20      	cmp	r3, #32
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b20      	cmp	r3, #32
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0220 	mvn.w	r2, #32
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fcb4 	bl	8003ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0ae      	b.n	80036c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f200 809f 	bhi.w	80036b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080036b5 	.word	0x080036b5
 8003584:	080036b5 	.word	0x080036b5
 8003588:	080036b5 	.word	0x080036b5
 800358c:	080035f1 	.word	0x080035f1
 8003590:	080036b5 	.word	0x080036b5
 8003594:	080036b5 	.word	0x080036b5
 8003598:	080036b5 	.word	0x080036b5
 800359c:	08003633 	.word	0x08003633
 80035a0:	080036b5 	.word	0x080036b5
 80035a4:	080036b5 	.word	0x080036b5
 80035a8:	080036b5 	.word	0x080036b5
 80035ac:	08003673 	.word	0x08003673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f9d6 	bl	8003968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0208 	orr.w	r2, r2, #8
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
      break;
 80035ee:	e064      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa1c 	bl	8003a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6999      	ldr	r1, [r3, #24]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	619a      	str	r2, [r3, #24]
      break;
 8003630:	e043      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fa65 	bl	8003b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0208 	orr.w	r2, r2, #8
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0204 	bic.w	r2, r2, #4
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
      break;
 8003670:	e023      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 faaf 	bl	8003bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	; 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	; 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	; 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f000 faf0 	bl	8003d66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f000 fad9 	bl	8003d66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 fa50 	bl	8003c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	; 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 faa7 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 fa6e 	bl	8003cd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	; 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fa97 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	461a      	mov	r2, r3
 8003814:	f000 fa30 	bl	8003c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fa87 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 fa7e 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
	...

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <TIM_Base_SetConfig+0xb8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <TIM_Base_SetConfig+0x30>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d007      	beq.n	80038d4 <TIM_Base_SetConfig+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a26      	ldr	r2, [pc, #152]	; (8003960 <TIM_Base_SetConfig+0xbc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a25      	ldr	r2, [pc, #148]	; (8003964 <TIM_Base_SetConfig+0xc0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d108      	bne.n	80038e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <TIM_Base_SetConfig+0xb8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0x62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <TIM_Base_SetConfig+0xbc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a18      	ldr	r2, [pc, #96]	; (8003964 <TIM_Base_SetConfig+0xc0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a07      	ldr	r2, [pc, #28]	; (800395c <TIM_Base_SetConfig+0xb8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d103      	bne.n	800394c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	615a      	str	r2, [r3, #20]
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800

08003968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 0201 	bic.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0302 	bic.w	r3, r3, #2
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <TIM_OC1_SetConfig+0xc8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10c      	bne.n	80039de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0308 	bic.w	r3, r3, #8
 80039ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 0304 	bic.w	r3, r3, #4
 80039dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <TIM_OC1_SetConfig+0xc8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d111      	bne.n	8003a0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40012c00 	.word	0x40012c00

08003a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 0210 	bic.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0320 	bic.w	r3, r3, #32
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <TIM_OC2_SetConfig+0xd0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10d      	bne.n	8003ab0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_OC2_SetConfig+0xd0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d113      	bne.n	8003ae0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00

08003b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10d      	bne.n	8003b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d113      	bne.n	8003bb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0f      	ldr	r2, [pc, #60]	; (8003c74 <TIM_OC4_SetConfig+0x98>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00

08003c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0201 	bic.w	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 030a 	bic.w	r3, r3, #10
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0210 	bic.w	r2, r3, #16
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f043 0307 	orr.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b087      	sub	sp, #28
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	609a      	str	r2, [r3, #8]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	2201      	movs	r2, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e046      	b.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e50:	d009      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10c      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800

08003ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	2600      	movs	r6, #0
 8003ed0:	4d0c      	ldr	r5, [pc, #48]	; (8003f04 <__libc_init_array+0x38>)
 8003ed2:	4c0d      	ldr	r4, [pc, #52]	; (8003f08 <__libc_init_array+0x3c>)
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	f000 f822 	bl	8003f24 <_init>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	4d0a      	ldr	r5, [pc, #40]	; (8003f0c <__libc_init_array+0x40>)
 8003ee4:	4c0a      	ldr	r4, [pc, #40]	; (8003f10 <__libc_init_array+0x44>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	08003f60 	.word	0x08003f60
 8003f08:	08003f60 	.word	0x08003f60
 8003f0c:	08003f60 	.word	0x08003f60
 8003f10:	08003f64 	.word	0x08003f64

08003f14 <memset>:
 8003f14:	4603      	mov	r3, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
